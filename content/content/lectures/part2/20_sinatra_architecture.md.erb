---
title: Sinatra Architectures
desc: Sinatra and Service Oriented Architectures
homework: 1) Read Chapter 2 of SODDR and do the warmups; 2) DBSchema of nT; 3) Complete work on nT 0.1.
cat: web
---

<%= homework_hdr %>

1. <%= zipbadge %> <%= pdfbadge %> **Read and Implement:** <%= link_to_topic :sinatra_series_4 %> and try to follow along and build the same app yourself. **Do the exercises** at the end of the reading and answer the warmup questions. <%= deliverable "Warmups response as a pdf; and your code as a .zip." %>
1. <%= partbadge %> <%= codebadge %> **Complete nt 0.1 as a team:** See: <%= link_to_topic :nt_outline %> for detailed submission instructions and specifics for this stage. <%= team_deliverable %(Github repo zipped up.) %>

#### Walk through of a basic scenario
* Baseball scoring application - First cut
  * Millions of fans are constantly refreshing page to see current score in real time as the game progresses
  * A local official enters stats as the game progresses
  * Default implementation with a single "monolythic" app
  * How will things break down
* Divide into two services: Fan user interface app
  * All scores are stored in a static JSON file on disk, "latest_scores.json"
  * Read only. This app never writes
  * Nearly infinitely scalable
* Admin app: Admin user interface
  * Create new games
  * Add new stats and info durng game
  * Stored in a Postgres database
  * Writes out new version of "latest_scores.json" once per second
  * Always responsive, no matter what's going on on user side
* Let's look: Isolation, Robustness, Scalability, Agility, Interoperability, Reuse

#### Review of everything so far
1. What a web server is and how Sinatra helps you create one
1. Meaning of the URL
1. ActiveRecord as the bridge between Ruby and the relational database
1. The relationship between the client and the server
1. How Unit testing is done with Mintest/Spec et al.
1. The idea of Test Driven Development
1. HTTP and it's different Verbs like GET, PUT, POST etc.

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
