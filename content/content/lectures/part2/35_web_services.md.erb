---
title: nanoTwitter and REST APIs
desc: How to think about Web Services API designs and documentation
homework: 2) Read about REST and respond to warmups; 2) Based on reading about routes in nanoTwitter, submit API documentation; 3) Continue work on nT 0.3
cat: nt
---
<%= homework_hdr %>

1. <%= partbadge %> <%= timebadge %> **REST API Best Practices** Read this article. It's long but important: [Best Practices for Designing a Pragmatic RESTful API](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api). Here are some warmup questions to think about:
    * The PUT http verb and the POST http verb sound very similar. Can you explain the difference? Include an example from nanoTwitter of where each would be appropriate, and explain why. (Beware this is a question that trips up even experienced web engineers!)
    * What are CRUD operations? You know that REST APIs follow the patterns of the CRUD operations. But what do you do when you need an action that doesn't fit? Give an example from nanoTwitter that fits within CRUD and one that does not.
    * In the context of REST APIs, what is pagination? Why would you say that pagination is a concern, and can you give some scenarios where it becomes a concern?
    * Please mention one or two concepts or topics from this reading that you didn't follow or would like to learn more about.
    * <%= deliverable "Respond to the warmups in Latte." %>
1. <%= codebadge %> **Web Services APIs** Examine the nt Web Services (REST) API routes from <%= link_to_topic :nt_functionality %>. You will see that the general pattern is laid out, but not all permutations are explained. Evaluate them in the context of this reading. You're welcome to improve them so they follow more pragmatic REST principles.

    Now, write "REST API Documentation" for the nanoTwitter service api. Look for examples on the web for how web APIs are documented for what you think is a good format. (Here's what twitter does as an example: [Twitter statuses API](https://dev.twitter.com/rest/reference/get/statuses/retweets_of_me).

    Remember that you have to state the url's "syntax" and the format of the input and output data (JSON). Your documentation should be good enough for a programmer who doesn't know anything about your app to properly access the API.

    You have a few other intersting alternatives: You can use [Swagger](https://swagger.io) to document your API and actually generate code for the service and the client. Or, you can use [GraphQL](http://graphql.org) to design a totally different, modern, yet non-REST Api. Both of these options are more advanced and would be recognized as a way to make your product more advanced. <%= team_deliverable "Markdown file documentation. Submit to Latte and also store in doc/ directory of your repo." %>
1. **Teams continue to work on nanoTwitter 0.3**. See: <%= link_to_topic :nt_outline %> for detailed submission instructions and specifics for this stage.

##### Interesting, not mandatory, reading
* [So What's This GraphQL thing I keep hearing about?](https://medium.freecodecamp.org/so-whats-this-graphql-thing-i-keep-hearing-about-baf4d36c20cf)
* [GraphpQL in Ruby](https://blog.appsignal.com/2019/01/29/graphql.html)
* [Anatomy of a GraphQL query](https://dev-blog.apollodata.com/the-anatomy-of-a-graphql-query-6dffa9e9e747)
* [Sinatra GraphQL example](https://github.com/robinjmurphy/ruby-graphql-server-example)

##### Ongoing work
* **Teams continue to work on nanoTwitter**. See: <%= link_to_topic :nt_outline %> for detailed submission instructions and specifics for this stage.

<%= include_topic :rest_web_services %>

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
