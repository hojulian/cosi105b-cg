---
title: Introduction to Scale
desc: What does scalability mean? How is it different from Performance? What do scalbility problems look like?
homework: 1) Study SODRR Chapter 4 in depth, submit warmup questions in Latte; 2) Complete work on nanoTwitter 0.2
cat: scale
---
<%= homework_hdr %>
**Legend**: <%=partbadge%>:Participation <%= timebadge %>:Early <%= pdfbadge %>:PDF <%=codebadge %>:Dropbox

1. <%= timebadge %> <%= partbadge %> Read \[SODRR\] Chapter 4. This is a hard, conceptual chapter. You will want to come back to it later in the course. This chapter goes into the next level of detail in the actual design of working servives in SOA or SOD. Here are your warmup questions:
  * In this chapter, and during the course so far, we talk about Services. They are the core concept of partitioning the workload into services. What exactly is meant by a 'service'. Why would you choose to partition it a certain way? For nanoTwitter give an example one bit of functionality that could be partitioned into a separate service and a reason why one would do this.
  * Whatever the reason, once we decide to partition out some functionality as service, we need to design its implementation. Explain the what is meant by the Interace (API) design of the service. What is the relationship with HTTP and the URI?
  * Can you come up with a nanoTwitter API which would require information from multiple models to be returned, and can you see why that might make sense. Think about information hiding, or efficiency, or isolation, or other considerations.
  * Please mention one or two concepts or topics from this reading that you didn't follow or would like to learn more about.
  * <%= deliverable("Find and respond to the warmups in latte") %>
1. <%= partbadge %> <%= codebadge %> <%= pdfbadge %> Complete nt 0.2 as a team (See: <%= link_to_section :nt, :nt_outline %>). Write and submit a brief project update as a pdf. What went well, what were the challenges, and what are the remaining problems. <%= team_deliverable %(nT code for **nanoTwitter 0.2** in portfolio and github. Submit to Latte the brief project update.) %>

#### Discussion
* Review How to do Authentication in Sinatra (see <%= link_to_section :nt, :nt_outline %>)
  * See: [Sinatra Authentication Example](https://sideprojectsoftware.com/blog/2015/02/22/sinatra-authentication.html) and [bcrypt for Ruby](https://github.com/codahale/bcrypt-ruby)
  * Let's look at my code
* Review the Test Interface (see <%= link_to_section :nt, :nt_outline %>)
  * Demonstrate and look at my code
* Review http <-> URI <-> API design <-> Caching
* Review Database join <-> un-normalized data

<%= include_topic :scaling %>

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
