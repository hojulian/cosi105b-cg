---
title: Web Servers
desc: With that foundation, we now look deeper at how web servers work.
homework: 1) Do the first 25 assignments in "Ruby the hard way"; 2) Begin working on the Mazes programming assignment
cat: web
---
<%= homework_hdr %>
1. Review your Ruby knowledge by going through [Learn Ruby The Hard Way](http://learnrubythehardway.org/book/preface.html). You should be at least up to Lesson 23. This will cover many of the basics up to functions. There is nothing to hand in here. But it's crucial that you really do the lessons and try the hands on work. No reading on your phone while on the treadmill! You shoring up the foundations on which your success in this course will be built!
1. <%= partbadge %> Begin working on the famous <%= link_to_topic :pa_mazes %>. This assignment is a little different, requiring you to get good with writing a more complicated algorithm than before. Do the work in your <%= link_to_intro :portfolio %>. Start a new top level directory for this second PA, i.e. `../cs166b_cburkh/mazes`. It will be due next class.

#### Discussion
* Questions about the homework. Discussion about Ruby the Hard Way. Discussion about Mazes.
* Ruby coding reminders:
  * spaces not tabs, 2 spaces per tab
  * Classes are CamelCased
  * method_names and variable_names are lower case, with underlines
  * filenames are lower case with underlines, named after the top_level_class.rb
  * Classes should be less than 100 lines long
  * Methods should be less than 15 lines long
  * No standalone code or definitions. Everything should be part of a class
  * No global variables
  * Don't use @@foo
  * instead of a method called "display" on a class, add a method called to_s which returns the class state as a text string. That way you can do a puts on it.

#### Web Servers: Review

<%= include_topic :how_web_servers_work %>

<%= include_topic :www %>

<%= include_topic :web_formats_protocols %>

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
