---
title: Sinatra Continued
desc: Sinatra is a a very lightweight Ruby based web server. We start playing with it.
homework: 1) Read "First Sinatra" and submit warmup exercises; 2) Implement the code from that Chapter yourself.
cat: web
---
<%= homework_hdr %>

1. <%= timebadge %> <%= partbadge %> **Read:** <%= link_to_topic :first_sinatra %> and try to follow along and build the same app yourself. Now please answer these warmup questions:
    * In your own words, what is a "Service"? Can you think of an example which is NOT mentioned in the book? Can you imagine an example of a "Service" that would be provided by nanoTwitter? [By the way, other words you will encounter for a "service" are a web service or a web API.]
    * ActiveRecord is an example of an ORM, Object Relational Mapper. What does an ORM do? Why is it useful? ActiveRecord is the most popular Ruby ORM. Do some googling and find another very popular Ruby ORM. (I don't have a specific one in mind, there are several popular ones to pick from.)
    * Can you explain the role of the "Client Library" in the code you wrote?
    * Please list one or two ideas in the Chapter that you just didn't understand. If you feel you understand it all, please list one or two ideas that you think are the most important. (Make sure you tell me whether you do or don't understand the concepts you list) :)

    <%= deliverable "Answer warmup questions in Latte" %>

2. <%= codebadge %> <%= partbadge %> **Code**: Now, actually implement the code in \[SODRR\] Chapter 1 and get it to work! **Important**: Please attend to these specific details!

<div class="well"><iframe width="400" height="225" src="https://www.youtube.com/embed/zPaG-g-d6sY?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe></div>

<%= callout("NB", " Dont overlook caveats in the following bullets") %>

  * Attempt to get the code to work, **but importantly, stop when you get to "Implementing the client library".**
  * Because the book is a couple of years old, there are some changes you need to keep in mind in order to get it to work on your own computer. They are all mentioned in the video but here they are again:
    1. gem is called `active_record` (not activerecord)
    1. No need to require 'rubygems' anymore (since Ruby 2.0)
    1. From the command line it is still `gem install activerecord` but line 2 of service.rb should be `require 'active_record'`
    1. Instead of `spec spec/service_spec.rb` I needed to run `rspec spec/service_spec.rb`
    1. service.rb line 4 should be `require_relative` instead of `require`
    1. I needed to install the following gems: sqlite3, rack-test, and byebug
    1. The first line of 001_create_users.rb should be `class CreateUsers < ActiveRecord::Migration[4.2]` instead of `class CreateUsers < ActiveRecord::Migration`
    1. I needed to run `rake db:migrate` before running `rspec spec/service_spec.rb`
    1. The first few lines of service_spec.rb change a lot. [Click here to see a working example](https://raw.githubusercontent.com/Cosi-105/sotl-user-service/master/spec/service_spec.rb)
    1. The specs the chapter tells you to add are already included in the code on your site in service_spec.rb
  * <%= deliverable "Zip up your working code." %>

{:start="3"}
1. <%= include_topic :coffee_assignment %>

#### Discussion
* Discuss concepts you learned
* Quick review of web client / server relationship (http/url/html/json)
* Reminder: <%= link_to_topic :what_is_sinatra %>

#### What is a web service and an SOA?
  * A web server is now used not just as a place that has web pages for people to read, but as a place that delivers a service (functionality, data, information) to other programs, without human intervention.
  * instead of returning HTML (for web browsers to render) it returns data (for other apps to use!) Such a server is often said to be delivering a *web service* or *web API*.
  * This brings the notion of modularity, isolation, information hiding all the way up to the level of full servers. And creating an application can now become the stringing together of web services, each of which might be delivered by a different company (think Amazon, Heroku, Apple, IBM)

<%= include_topic :models %>
<%= include_topic :ar_db_mechanics %>

#### Walk through some code
* [Sinatra Intro](http://www.sinatrarb.com/intro.html)
* [Simple Database Driven Website with Heroku](https://samuelstern.wordpress.com/2012/11/28/making-a-simple-database-driven-website-with-sinatra-and-heroku/)
* [SOTL-simple-service](https://github.com/pitosalas/sotl-user-service)

#### Sinatra References
* The readme of Sinatra is a great resource: [Sinatra Readme](http://www.sinatrarb.com/intro.html)
* A good basic book on sinatra is: [Sinatra Up and Running](http://www.amazon.com/Sinatra-Up-Running-Alan-Harris/dp/1449304230)


#### Next Class
* Look at homework: <%= link_to_next_lecture %>
