---
title: "Scaling Patterns: Caching"
desc: Caching is one of the first, simplest ways of attacking scale
homework: 1) Complete nT 0.4, submit brief project update
cat: scale
---
<%= homework_hdr %>
**Legend**: <%=partbadge%>:Participation <%= timebadge %>:Early <%= pdfbadge %>:PDF <%=codebadge %>:Dropbox

1. <%= partbadge %> <%= codebadge %> **Complete nt 0.4 as a team:** See: <%= link_to_section :nt, :nt_outline %> for detailed submission instructions and specifics for this stage. <%= team_deliverable %(Github repo zipped up.) %>

#### nT 0.4
* 5 minute team discussion about your status
* Write on a piece of paper what % of nT 0.0-nt 0.4 you have completed
* Reference: <%= link_to_section :nt, :nt_outline %>

#### Review and background
* <%= link_to_lecture :architecting_for_scale %>

#### Review: Achieving Scale
* Measuring performance:
  * How many Xs per second?
  * and/orhow long does it take to Y?
* Analysis
  * Instrumentation (basically logging)
  * Deep thought
  * Identify the bottle neck
* Action
  * Remove the bottle neck
* Remember: One of the cardinal "sins" is optimizing early
  * Instead, optimize based on measurement
  * Discover which parts of your product's features is causing a scaling problem
  * Consider which of your techniques might be brought to bear

<%= include_topic :scaling_caching %>

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
